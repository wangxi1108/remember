SASS/LESS:
	CSS 预处理器
	通过类似 JS 编程开发的方式来实现 CSS 开发，即可以使用变量、运算符、条件结构、循环结构、函数...

	sass 是基于 ruby 开发语言的，使用到 ruby 的环境

	步骤：
		a. 编写 sass 源代码
			保存文件后缀：.scss
		b. 编译 -- 将 sass 代码转换为 css 代码
			编译生成的 CSS 代码风格：
				nested
					.box {
					  width: 300px;
					  height: 400px; }
				expanded
					.box {
					  width: 300px;
					  height: 400px;
					}
				compact
					.box { width: 300px; height: 400px; }
					.box-title { height: 30px; line-height: 30px; }
				compressed 
					.box{width:300px;height:400px}.box-title{height:30px;line-height:30px}


	SASS 开发：
		a. 变量：$开头
		b. CSS 嵌套
		c. 混合器
			@mixin
			@include
		d. 继承
			@extend
		e. 流程控制语句
			@if @else
			@for @each @while
		f. 函数
			@function
			@return



gulp-ruby-sass
	需要 ruby 环境

// 使用 gulp-sass
// 先安装 node-sass
// 再安装 gulp-sass




Git工作流程：
	1. 克隆 Git 资源作为工作目录。
	2. 在克隆的资源上添加或修改文件。
	3. 如果其他人修改了，你可以更新资源。
	4. 在提交前查看修改。
	5. 提交修改。
	6. 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。

概念：
	工作区：项目目录
	版本库：.git目录
	暂存区：.git目录下的 index 文件

Git使用：
	1. 安装 -- Git Bash
	2. 全局配置(一台计算机一次就可以了。)
		git config --global user.name "xiaoming"
		git config --global user.email wumingfu@1000phone.com

		版本提交时标识用户


	上述两步执行一次即可 


	本地操作：
	1. 创建版本库
		在项目目录下执行命令：
			git init
			生成 .git 隐藏目录，该目录中保存版本库管理相关的文件
	(当自己已经在项目里装了其他插件，例如sass,less,css压缩，js压缩，
可在package.json里面看到。无需从新安装，在命令窗口执行 cnpm install 那在项目里就会自动找到，并一起安装到git上了。)

			touch .gitignore
			创建 .gitignore 文件，在该文件中指明哪些资源不需要使用 git 管理
	(把不上传的文件名字写在里面，每个文件名字占一行。)
	补：
		可创建一个readme.md自诉文件 

	2. 将待跟踪文件添加到暂存区
		git add .

		git status -- 查看版本库状态

	3. 提交暂存区中资源到版本库
		git commit -m  写版本消息
	(版本消息时不要有空格，不然会出错)。

		git log -- 查看版本提交的日志信息
		git reflog -- 查看版本日git志（版本号）


	同步远程仓库(github)：
	1. 注册 github 账户
	2. 本地执行命令：
		ssh-keygen -t rsa -C "注册github时的邮箱"
	   （在C盘，C:\Users\qianfeng\.ssh 里有个.ssh文件，里面的id_rsa文件是自己的私钥，
		id_rsa.pub文件是公钥,复制公钥为gitHub上的钥匙。）

     （直接用命令创建秘钥：
	ssh-keygen -t rsa  -C "2532258232@qq.com"，

	clip < ~/.ssh/id_rsa.pub
	ssh -T git@github.com   ）

	3. 到 github 账户中配置 "SSH and GPG keys"
	4. 测试是否本地与服务器能够使用 SSH 连接成功 
		ssh -T git@github.com
	
	(出现 Hi wangxi1108! You've successfully authenticated, but GitHub does not provide shell access.

		)
	5. 在服务器端创建新空白版本库
		"Create a new repository"
		输入版本库名称及描述后，创建
	6. 配置本地版本库 -- 关联
		git remote add origin git@github.com:itrainhub/html5_1702.git
	7. 推送本地仓库到远程仓库
		git push -u origin master

	
	8、以上步骤为把当前项目的内容传到git了，环境已经搭好。
	可以继续编写项目了，当项目编写结束后，又要上传到git，此时就
	 直接 git status
	      git push
	 即可把内容更新上去了。





注意：用https协议时，邮箱不能用qq邮箱，数字开头的
。可以写 用户名。-----------



	远程克隆回本地:
	
	1. 克隆远程仓库(登录gitHub，找到code右边显示的克隆或者下载，复制语句)；
		git clone 远程仓库的资源路径
		在命令上写git clone git@github.com:wangxi1108/roseonly.git

	2. 修改文件
	3. 提交版本
	4. 推送版本

	更新回本地
		git pull


	常用命令：
		git status
		git add .
		git commit -m 信息
		git status
		git push
		git clone
		git push
		git pull

		

在另外一台电脑上克隆下来：
	git init
	进入github,点开 SSH and GPG keys	
	然后点击 generating SSH keys，执行 G-A-T

	:ssh-keygen -t rsa -b 4096 -C "25322582322qq.com"
	
	:$ clip < ~/.ssh/id_rsa.pub
	然后在新建钥匙的那里直接粘贴就可以了。

	：ssh -T git@github.com

	最后再进入github上的项目文件夹里，复制clon
	执行： git clone git@github.com:wangxi1108/comment.git
	就克隆下来了。 
	


"dependencies": these packages are required by your application in production
您的应用程序在生产中需要这些软件包.

"devDependencies": these packages are only needed for development and testing
这些包只需要开发和测试.